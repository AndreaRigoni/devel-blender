#!/bin/bash


CWD=$(pwd)
SCRIPT_DIR=$( cd "$( dirname "${BASH_SOURCE[0]}" )" && pwd )
SUDO="sudo"

AUTOCONF_WARNINGS=${AUTOCONF_WARNINGS:-none}
UPDATE_SUBMODULES=conf/update_submodules.sh


##### Generic Helpers #####

BLACK=$(tput setaf 0)
RED=$(tput setaf 1)
GREEN=$(tput setaf 2)
YELLOW=$(tput setaf 3)
LIME_YELLOW=$(tput setaf 190)
POWDER_BLUE=$(tput setaf 153)
BLUE=$(tput setaf 4)
MAGENTA=$(tput setaf 5)
CYAN=$(tput setaf 6)
WHITE=$(tput setaf 7)
BRIGHT=$(tput bold)
NORMAL=$(tput sgr0)
BLINK=$(tput blink)
REVERSE=$(tput smso)
UNDERLINE=$(tput smul)

_echo() {
  if [ "X$1" = "X-n" ]; then
     shift; printf "%s" "$@"
  else
     printf "%s\n" "$@"
  fi
}

ERROR() { _echo "${BRIGHT}${RED}ERROR! ${NORMAL}${RED}$@${NORMAL}"; }
WARNING() { _echo "${BRIGHT}${YELLOW}WARNING! ${NORMAL}${YELLOW}$@${NORMAL}"; }
INFO() { _echo "${GREEN}$@${NORMAL}"; }
PRINT() { _echo "$@"; }



install_packages_DEB() {
  if [ ! $SUDO ]; then
    WARNING "--no-sudo enabled, impossible to run apt-get install for $@, you'll have to do it yourself..."
  else
    $SUDO apt-get install -y $@
    if [ $? -ge 1 ]; then
      ERROR "apt-get failed to install requested packages, exiting."
      exit 1
    fi
  fi
}

install_DEB() {
  PRINT ""
  INFO "Installing dependencies for DEB-based distribution"
  PRINT ""
  if [ ! $SUDO ]; then
    WARNING "--no-sudo enabled, impossible to run apt-get update, you'll have to do it yourself..."
  else
    $SUDO apt-get update
  fi
  ## PACKAGES FOR DEB BASED DISTRO ##
  _packages=" build-essential \
              gawk \
              git \
              autoconf \
              automake \
	      pkgconf \
              libtool \
              locales \
              libncurses5-dev \
			  apt-transport-https \
		      ca-certificates \
			  curl \
		      software-properties-common
			"

  PRINT ""
  install_packages_DEB $_packages

  ## install DOCKER_CE
  curl -fsSL https://download.docker.com/linux/ubuntu/gpg | sudo apt-key add -

  $SUDO add-apt-repository \
	 "deb [arch=amd64] https://download.docker.com/linux/ubuntu \
	 $(lsb_release -cs) \
	 stable"

  $SUDO apt-get -y update
  $SUDO apt-get -y install docker-ce
  $SUDO usermod -aG docker $USER
}

install_ARCH() { :; }
install_RPM() { :; }
install_OTHER() { :; }


# //////////////////////////////////////////////////////////////////////////////
# //  MAIN  ////////////////////////////////////////////////////////////////////
# //////////////////////////////////////////////////////////////////////////////
#
# Detect distribution type used on this machine
if [ -f /etc/debian_version ]; then
  DISTRO="DEB"
  install_DEB
elif [ -f /etc/arch-release ]; then
  DISTRO="ARCH"
  install_ARCH
elif [ -f /etc/redhat-release -o /etc/SuSE-release ]; then
  DISTRO="RPM"
  install_RPM
else
  DISTRO="OTHER"
  install_OTHER
fi

## SUBMODULES ##
[ -f ${UPDATE_SUBMODULES} ] && . ${UPDATE_SUBMODULES} || exit 1


## KCONFIG ##
if [ -d conf/kconfig ]; then
 pushd conf/kconfig
 ./bootstrap
 popd
fi

<<<<<<< HEAD
## AUTOTOOLS ##
aclocal -I ./conf/m4 -W ${AUTOCONF_WARNINGS}
=======
aclocal -I ./conf/m4 --install 

>>>>>>> 057d2a3e6855448dd9b4f7f55745562f8e963f95
autoheader
# libtoolize -c
automake --add-missing --copy -W ${AUTOCONF_WARNINGS}
autoconf

<<<<<<< HEAD


=======
echo "#"
echo "# All done... now try to configure using \"./configure --enable-kconfig\""
echo "#"


# To remove a submodule you need to:
# 
# Delete the relevant section from the .gitmodules file.
# Stage the .gitmodules changes git add .gitmodules
# Delete the relevant section from .git/config.
# Run git rm --cached path_to_submodule (no trailing slash).
# Run rm -rf .git/modules/path_to_submodule (no trailing slash).
# Commit git commit -m "Removed submodule "
# Delete the now untracked submodule files rm -rf path_to_submodule
>>>>>>> 057d2a3e6855448dd9b4f7f55745562f8e963f95
